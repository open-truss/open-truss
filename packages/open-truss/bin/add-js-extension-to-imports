#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

const outputDirectory = `${process.env.PACKAGE_DIR}/dist/mjs`

function addJsExtensionToImports(filePath) {
  const directoryPath = path.dirname(filePath)
  let content = fs.readFileSync(filePath, 'utf8')
  const regex = /from (['"])(.*?)(['"])/g // Handles if imports use ' or "" quotes
  const updatedContent = content.replace(regex, (match, _, p1, p2) => {
    // Return eearly if there is already an extension
    if (p1.endsWith('.js')) return match

    // If a local import
    if (p1.startsWith('.')) {
      let fullPath = path.join(directoryPath, p1)

      // Import is a file
      if (fs.existsSync(`${fullPath}.js`)) {
        return `from '${p1}.js'`
      // Else if import is a directory
      } else if (fs.existsSync(fullPath) && fs.statSync(fullPath).isDirectory()) {
        // Is it the case that all imports of directories default to index.js?
        // If not, we should make sure OT's does since this code depends on it.
        return `from '${p1}/index.js'`
      } else {
        // In theory this should never throw. If starts with '.' it should
        // be a local import and that file / directory should exist.
        // Otherwise there is something wrong with the typescript compiler
        throw new Error(`Did not find local import ${fullPath}`)
      }
    // else a package import
    } else {
      return match
      const slashCount = p1.split('/').length - 1
      //@ Imports with 2 slashes need .js. e.g. import get from '@open-truss/open-truss/pages.js'
      if (p1.includes('@')) {
        if (slashCount >= 2) {
          return `from '${p1}.js'`
        } else {
          return match
        }
      // Imports with 1 slash need .js. e.g. import get from 'lodash/get.js'
      } else if (slashCount >= 1) {
        return `from '${p1}.js'`
      // Imports without slashes don't need .js. e.g.  import { useState } from 'react';
      } else {
        return match
      }
    }
  })

  if (content !== updatedContent) {
    fs.writeFileSync(filePath, updatedContent, 'utf8')
  }
}

function processDirectory(directory) {
  const files = fs.readdirSync(directory, { withFileTypes: true });

  for (const file of files) {
    const fullPath = path.join(directory, file.name);
    if (file.isDirectory()) {
      processDirectory(fullPath);
    } else if (file.name.endsWith('.js') || file.name.endsWith('.jsx')) {
      addJsExtensionToImports(fullPath);
    }
  }
}

function watchDirectory(directory) {
  fs.watch(directory, { recursive: true }, (_eventType, filename) => {
    if (filename && (filename.endsWith('.js') || filename.endsWith('.jsx'))) {
      const fullPath = path.join(directory, filename)
      addJsExtensionToImports(fullPath)
    }
  })
}

const shouldWatch = process.argv.includes('--watch')

if (shouldWatch) {
  console.log('Watching for file changes to add js extensions...')
  watchDirectory(outputDirectory)
} else {
  processDirectory(outputDirectory)
}
